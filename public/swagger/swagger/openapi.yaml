openapi: 3.0.0
info:
  title: 'Exa API'
  version: '1.0'
paths:
  /v1/auth/login:
    post:
      tags:
        - Auth
      description: Login
      operationId: 10addabada2b56dde78d06391a099e9d
      requestBody:
        description: 'Login credentials'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: 'Successful login'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login-response'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: 'Invalid Data'
        '500':
          description: 'Server Error'
  /v1/auth/logout:
    post:
      tags:
        - Auth
      description: Logout
      operationId: c0f6c2f74906c1e48445df3b87cc7007
      responses:
        '204':
          description: 'Successful logout'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: 'Server Error'
      security:
        -
          jwt: []
  /v1/auth/me:
    get:
      tags:
        - Auth
      description: 'Get current user'
      operationId: e2badb77657f48a90c391f515f7f81ec
      responses:
        '200':
          description: 'The current user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: 'Server Error'
      security:
        -
          jwt: []
  /v1/users:
    get:
      tags:
        - 'Users Management'
      description: 'Get users list'
      operationId: dddfca0ad1c30589a80452ae20be7b49
      parameters:
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        -
          name: per_page
          in: query
          required: false
          schema:
            type: integer
            default: 20
        -
          name: sort_field
          in: query
          required: false
          schema:
            type: string
        -
          name: sort_order
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'The list of users'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/user' } }
                  links: { $ref: '#/components/schemas/pagination-links' }
                  meta: { $ref: '#/components/schemas/pagination-meta' }
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: 'Server Error'
      security:
        -
          jwt: []
    post:
      tags:
        - 'Users Management'
      description: 'Create user'
      operationId: e55c3926e0aea937d1fd198d811000ab
      requestBody:
        description: 'User data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-user'
      responses:
        '200':
          description: 'The created user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: 'Invalid Data'
        '500':
          description: 'Server Error'
      security:
        -
          jwt: []
  '/v1/users/{uuid}':
    get:
      tags:
        - 'Users Management'
      description: 'Get user'
      operationId: 9c766404598b7bddc95b5ac4a74fabc6
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Not Found'
        '500':
          description: 'Server Error'
      security:
        -
          jwt: []
    put:
      tags:
        - 'Users Management'
      description: 'Update user'
      operationId: 899e36198e762bafc03d48209055628d
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 'User data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-user'
      responses:
        '200':
          description: 'The updated user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Not Found'
        '422':
          description: 'Invalid Data'
        '500':
          description: 'Server Error'
      security:
        -
          jwt: []
    delete:
      tags:
        - 'Users Management'
      description: 'Delete user'
      operationId: 9255953fc4231a39dc9896d3875b72d5
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'User deleted'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Not Found'
        '500':
          description: 'Server Error'
      security:
        -
          jwt: []
components:
  schemas:
    pagination-links:
      properties:
        first:
          type: string
        last:
          type: string
        prev:
          type: string
        next:
          type: string
      type: object
    pagination-meta:
      properties:
        current_page:
          type: integer
        from:
          type: integer
        last_page:
          type: integer
        path:
          type: string
        per_page:
          type: integer
        to:
          type: integer
        total:
          type: integer
        links:
          type: array
          items:
            properties:
              url:
                type: string
              label:
                type: string
              active:
                type: boolean
            type: object
      type: object
    create-user:
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        role:
          type: string
          default: regular
          enum:
            - viewer
            - regular
            - manager
            - admin
      type: object
    login:
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      type: object
    update-user:
      properties:
        name:
          type: string
        email:
          type: string
        current_password:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        role:
          type: string
          default: regular
          enum:
            - viewer
            - regular
            - manager
            - admin
        active:
          type: boolean
      type: object
    login-response:
      properties:
        type:
          type: string
        token:
          type: string
      type: object
    user:
      properties:
        uuid:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      type: object
  securitySchemes:
    jwt:
      type: http
      name: jwt
      in: header
      bearerFormat: JWT
      scheme: bearer
